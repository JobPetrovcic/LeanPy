from Structures.Expression.Expression import *
import abc
from Structures.Environment.ReducibilityHint import ReducibilityHint
from Structures.Expression.Level import LevelParam
from Structures.Name import Name
from _typeshed import Incomplete
from abc import abstractmethod

__all__ = ['Declaration', 'Axiom', 'Definition', 'Theorem', 'Opaque', 'Quot', 'Inductive', 'Constructor', 'Recursor', 'DeclarationInfo', 'RecursorRule']

class RecursorRule:
    constructor: Incomplete
    num_fields: Incomplete
    value: Incomplete
    def __init__(self, constructor: Name, num_fields: int, value: Expression) -> None: ...

class DeclarationInfo:
    ciname: Incomplete
    lvl_params: Incomplete
    type: Incomplete
    def __init__(self, ciname: Name, lvl_params: list[LevelParam], type: Expression) -> None: ...

class Declaration(metaclass=abc.ABCMeta):
    info: Incomplete
    def __init__(self, info: DeclarationInfo) -> None: ...
    def get_type(self) -> Expression: ...
    def get_height(self) -> int: ...
    @abstractmethod
    def has_value(self, allow_opaque: bool = False) -> bool: ...
    def get_hint(self) -> ReducibilityHint: ...

class Axiom(Declaration):
    def __init__(self, info: DeclarationInfo) -> None: ...
    def has_value(self, allow_opaque: bool = False) -> bool: ...

class Definition(Declaration):
    value: Incomplete
    hint: Incomplete
    def __init__(self, info: DeclarationInfo, value: Expression, hint: ReducibilityHint) -> None: ...
    def has_value(self, allow_opaque: bool = False) -> bool: ...

class Theorem(Declaration):
    value: Incomplete
    def __init__(self, info: DeclarationInfo, value: Expression) -> None: ...
    def has_value(self, allow_opaque: bool = False) -> bool: ...

class Opaque(Declaration):
    value: Incomplete
    def __init__(self, info: DeclarationInfo, value: Expression) -> None: ...
    def has_value(self, allow_opaque: bool = False) -> bool: ...

class Quot(Declaration):
    def __init__(self, info: DeclarationInfo) -> None: ...
    def has_value(self, allow_opaque: bool = False) -> bool: ...

class Inductive(Declaration):
    is_recursive: Incomplete
    num_params: Incomplete
    num_indices: Incomplete
    inductive_names: Incomplete
    constructor_names: Incomplete
    is_checked: bool
    def __init__(self, info: DeclarationInfo, is_recursive: bool, num_params: int, num_indices: int, inductive_names: list[Name], constructor_names: list[Name]) -> None: ...
    def number_of_constructors(self) -> int: ...
    def get_ith_constructor_name(self, i: int) -> Name: ...
    def has_value(self, allow_opaque: bool = False) -> bool: ...

class Constructor(Declaration):
    inductive_name: Incomplete
    c_index: Incomplete
    num_params: Incomplete
    num_fields: Incomplete
    is_checked: bool
    def __init__(self, info: DeclarationInfo, c_index: int, inductive_name: Name, num_params: int, num_fields: int) -> None: ...
    def has_value(self, allow_opaque: bool = False) -> bool: ...

class Recursor(Declaration):
    num_params: Incomplete
    num_indices: Incomplete
    num_motives: Incomplete
    num_minors: Incomplete
    recursor_rules: Incomplete
    isK: Incomplete
    def __init__(self, info: DeclarationInfo, num_params: int, num_indices: int, num_motives: int, num_minors: int, recursor_rules: list['RecursorRule'], isK: bool) -> None: ...
    def has_value(self, allow_opaque: bool = False) -> bool: ...
    def get_major_index(self) -> int: ...
    def get_major_induct(self) -> Name: ...
    def get_recursion_rule(self, major: Expression) -> RecursorRule | None: ...
