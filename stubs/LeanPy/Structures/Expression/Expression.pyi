from Structures.Expression.Level import *
from Structures.Name import *
import abc
from _typeshed import Incomplete
from abc import abstractmethod

__all__ = ['Expression', 'BVar', 'FVar', 'Sort', 'Const', 'App', 'Pi', 'Lambda', 'Let', 'Proj', 'NatLit', 'StrLit', 'expr_constructors']

class Expression(metaclass=abc.ABCMeta):
    hash: Incomplete
    def __init__(self) -> None: ...
    @abstractmethod
    def get_hash(self) -> int: ...
    def __hash__(self) -> int: ...
    @abstractmethod
    def totally_equal(self, other: Expression) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class BVar(Expression):
    db_index: Incomplete
    def __init__(self, db_index: int) -> None: ...
    def get_hash(self) -> int: ...
    def totally_equal(self, other: Expression) -> bool: ...

class FVar(Expression):
    name: Incomplete
    type: Incomplete
    val: Incomplete
    is_let: Incomplete
    def __init__(self, name: Name, type: Expression, val: Expression | None, is_let: bool) -> None: ...
    def full_identifier(self) -> str: ...
    def full_print(self) -> str: ...
    def get_hash(self) -> int: ...
    def totally_equal(self, other: Expression) -> bool: ...

class Sort(Expression):
    level: Incomplete
    def __init__(self, level: Level) -> None: ...
    def get_hash(self) -> int: ...
    def totally_equal(self, other: Expression) -> bool: ...

class Const(Expression):
    cname: Incomplete
    lvl_params: Incomplete
    def __init__(self, cname: Name, lvl_params: list[Level]) -> None: ...
    def get_hash(self) -> int: ...
    def totally_equal(self, other: Expression) -> bool: ...

class App(Expression):
    fn: Incomplete
    arg: Incomplete
    def __init__(self, fn: Expression, arg: Expression) -> None: ...
    def get_hash(self) -> int: ...
    def totally_equal(self, other: Expression) -> bool: ...

class Pi(Expression):
    bname: Incomplete
    arg_type: Incomplete
    body_type: Incomplete
    def __init__(self, bname: Name, arg_type: Expression, body_type: Expression) -> None: ...
    def get_hash(self) -> int: ...
    def totally_equal(self, other: Expression) -> bool: ...

class Lambda(Expression):
    bname: Incomplete
    arg_type: Incomplete
    body: Incomplete
    def __init__(self, bname: Name, arg_type: Expression, body: Expression) -> None: ...
    def get_hash(self) -> int: ...
    def totally_equal(self, other: Expression) -> bool: ...

class Let(Expression):
    bname: Incomplete
    arg_type: Incomplete
    val: Incomplete
    body: Incomplete
    def __init__(self, bname: Name, arg_type: Expression, val: Expression, body: Expression) -> None: ...
    def get_hash(self) -> int: ...
    def totally_equal(self, other: Expression) -> bool: ...

class Proj(Expression):
    sname: Incomplete
    index: Incomplete
    expr: Incomplete
    def __init__(self, sname: Name, index: int, expr: Expression) -> None: ...
    def get_hash(self) -> int: ...
    def totally_equal(self, other: Expression) -> bool: ...

class NatLit(Expression):
    val: Incomplete
    def __init__(self, val: int) -> None: ...
    def get_hash(self) -> int: ...
    def totally_equal(self, other: Expression) -> bool: ...

class StrLit(Expression):
    val: Incomplete
    def __init__(self, val: str) -> None: ...
    def get_hash(self) -> int: ...
    def totally_equal(self, other: Expression) -> bool: ...

expr_constructors: Incomplete
