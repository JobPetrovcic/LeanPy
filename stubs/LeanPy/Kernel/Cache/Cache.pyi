from Structures.Expression.Expression import Expression as Expression
from _typeshed import Incomplete
from typing import Generic, TypeVar

class MapCache:
    cache: Incomplete
    def __init__(self) -> None: ...
    def get(self, key: Expression) -> Expression | None: ...
    def put(self, key: Expression, value: Expression): ...

class InferCache(MapCache):
    def __init__(self) -> None: ...

class WHNFCache(MapCache):
    def __init__(self) -> None: ...
T = TypeVar('T')

class PairCache(Generic[T]):
    cache: Incomplete
    def __init__(self) -> None: ...
    def get(self, expr1: Expression, expr2: Expression) -> T | None: ...
    def put(self, expr1: Expression, expr2: Expression, value: T): ...
